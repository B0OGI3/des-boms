// DES-BOMS (Delivered Engineering Solutions - Batch Order Management System)
// Manufacturing-focused database schema for order management, routing, and quality control

// Prisma Client Configuration
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// Database Configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// 1. CUSTOMER & ORDER MANAGEMENT
// =============================================================================

// Customer Model - Manufacturing customers who place orders
model Customer {
  id              String    @id @default(cuid())
  name            String    // Customer/Company name
  contactName     String?   // Primary contact person
  email           String?   @unique
  phone           String?
  billingAddress  String?
  shippingAddress String?
  notes           String?   // General customer notes
  
  // QuickBooks Integration Fields
  quickbooksId    String?   // QuickBooks Customer ID for sync
  syncStatus      SyncStatus @default(PENDING) // Sync state tracking
  lastSyncedAt    DateTime? // Last successful sync timestamp
  syncError       String?   // Last sync error message if any
  
  // Relations
  purchaseOrders  PurchaseOrder[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Purchase Order Header
model PurchaseOrder {
  id          String        @id @default(cuid())
  systemOrderId String      @unique @default(cuid()) // System-generated unique ID
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  String
  poNumber    String        // Customer-provided PO number
  dueDate     DateTime      // Order-level due date
  priority    OrderPriority @default(STANDARD)
  notes       String?       // Order-level notes/shipping details
  
  // Relations
  lineItems   OrderLineItem[]
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Parts Master - Central part definition with BOM structure
model Part {
  id            String      @id @default(cuid())
  partNumber    String      @unique // System-generated unique ID
  partName      String      // Descriptive part name
  partType      PartType    // Finished, Semi-Finished, Raw Material
  drawingNumber String?     // Engineering drawing number
  revisionLevel String?     // Drawing revision (A, B, C, etc.)
  description   String?     // Detailed part description
  materialSpec  String?     // Material specification (e.g., "Ti-6Al-4V", "6061-T6")
  unitOfMeasure String?     // UOM (each, ft, lb, etc.)
  standardCost  Decimal?    // Standard cost per unit
  leadTime      Int?        // Lead time in days
  active        Boolean     @default(true)
  notes         String?     // Part-specific notes
  
  // BOM Relations
  parentBOMs    BOMComponent[] @relation("ParentPart")
  childBOMs     BOMComponent[] @relation("ChildPart")
  
  // Order Relations
  orderLineItems OrderLineItem[]
  
  // Material Consumption Relations
  materialConsumptions MaterialConsumption[]
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// BOM (Bill of Materials) - Part composition relationships
model BOMComponent {
  id              String   @id @default(cuid())
  parentPart      Part     @relation("ParentPart", fields: [parentPartId], references: [id])
  parentPartId    String
  childPart       Part     @relation("ChildPart", fields: [childPartId], references: [id])
  childPartId     String
  quantity        Decimal  // Quantity of child part needed per parent
  unitOfMeasure   String?  // UOM for this relationship
  scrapFactor     Decimal? // Expected scrap percentage (0.05 = 5%)
  operation       String?  // Where this component is used in manufacturing
  notes           String?  // Component-specific notes
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([parentPartId, childPartId]) // Prevent duplicate relationships
}

// Order Line Items - Individual parts within a PO (linked to Parts Master)
model OrderLineItem {
  id            String        @id @default(cuid())
  purchaseOrder PurchaseOrder @relation(fields: [orderId], references: [id])
  orderId       String
  part          Part          @relation(fields: [partId], references: [id])
  partId        String        // Links to Parts Master
  quantity      Int           // Ordered quantity
  unitPrice     Decimal?      // Price per unit for this order
  dueDate       DateTime?     // Line item due date (overrides PO due date)
  notes         String?       // Line item specific notes
  
  // Relations
  fileAttachments FileAttachment[]
  batches         Batch[]
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// File Attachments - Drawings, CAD models, specs per line item
model FileAttachment {
  id             String        @id @default(cuid())
  lineItem       OrderLineItem @relation(fields: [lineItemId], references: [id])
  lineItemId     String
  fileName       String        // Original file name
  storedFileName String        // Actual filename on disk (with timestamp)
  filePath       String        // Full storage path/URL
  fileType       String        // File extension/type
  mimeType       String        // MIME type for proper handling
  fileSize       Int           // File size in bytes
  uploadedBy     String        // User who uploaded
  description    String?       // File description
  
  // Timestamps
  createdAt      DateTime      @default(now())
}

// =============================================================================
// 2. BATCH & ROUTING MANAGEMENT
// =============================================================================

// Batch - Manufacturing batch tied to a line item
model Batch {
  id                  String        @id @default(cuid())
  batchId             String        @unique // Format: DES-YYYY-MMDD-###
  lineItem            OrderLineItem @relation(fields: [lineItemId], references: [id])
  lineItemId          String
  quantity            Int           // Quantity in this batch
  startDate           DateTime?     // Actual start date
  estimatedCompletion DateTime?     // Estimated completion
  actualCompletion    DateTime?     // Actual completion
  priority            BatchPriority @default(STANDARD)
  status              BatchStatus   @default(QUEUED)
  notes               String?       // Batch-specific notes
  
  // Relations
  routingSteps        RoutingStep[]
  qcRecords          QCRecord[]
  materialConsumption MaterialConsumption[] // Track raw material usage
  
  // Timestamps
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

// Material Consumption - Track raw materials used in batches
model MaterialConsumption {
  id            String   @id @default(cuid())
  batch         Batch    @relation(fields: [batchId], references: [id])
  batchId       String
  materialPart  Part     @relation(fields: [materialPartId], references: [id])
  materialPartId String  // Links to raw material part
  quantityUsed  Decimal  // Actual quantity consumed
  unitCost      Decimal? // Cost per unit at time of consumption
  consumedAt    DateTime @default(now())
  operatorId    String?  // Who recorded the consumption
  notes         String?  // Consumption notes
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([batchId, materialPartId]) // One consumption record per material per batch
}

// Routing Steps - Sequential workstation steps for each batch
model RoutingStep {
  id            String           @id @default(cuid())
  batch         Batch            @relation(fields: [batchId], references: [id])
  batchId       String
  stepNumber    Int              // Sequence in route (1, 2, 3...)
  workstation   Workstation      @relation(fields: [workstationId], references: [id])
  workstationId String
  description   String           // Task description
  required      Boolean          @default(true) // Is this step required?
  estimatedTime Int?             // Estimated time in minutes
  notes         String?          // Operator instructions
  status        StepStatus       @default(PENDING)
  
  // Relations
  confirmations StepConfirmation[]
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@unique([batchId, stepNumber]) // Ensure unique step numbers per batch
}

// Workstations - Manufacturing workstations/machines
model Workstation {
  id           String        @id @default(cuid())
  name         String        @unique // e.g., "LATHE-1", "MILL-2"
  description  String?       // Workstation description
  active       Boolean       @default(true)
  
  // Relations
  routingSteps RoutingStep[]
  confirmations StepConfirmation[]
  
  // Timestamps
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// =============================================================================
// 3. OPERATOR CONFIRMATION SYSTEM
// =============================================================================

// Step Confirmations - Operator actions at workstations
model StepConfirmation {
  id            String       @id @default(cuid())
  routingStep   RoutingStep  @relation(fields: [stepId], references: [id])
  stepId        String
  workstation   Workstation  @relation(fields: [workstationId], references: [id])
  workstationId String
  operatorName  String       // Logged-in operator
  operatorId    String?      // Optional operator ID/badge number
  startTime     DateTime?    // When operator started step
  endTime       DateTime?    // When operator completed step
  notes         String?      // Operator comments/issues
  photoUrl      String?      // Optional photo upload
  flagged       Boolean      @default(false) // Issue flagged?
  status        ConfirmationStatus @default(STARTED)
  
  // Timestamps
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// =============================================================================
// 4. INSPECTION & QUALITY CONTROL
// =============================================================================

// QC Records - Quality control inspections per batch
model QCRecord {
  id          String    @id @default(cuid())
  batch       Batch     @relation(fields: [batchId], references: [id])
  batchId     String
  inspector   String    // Inspector name/ID
  inspectionDate DateTime @default(now())
  result      QCResult  // Pass/Fail/Rework
  notes       String?   // Inspection notes
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// =============================================================================
// 5. ENUMS - STATUS DEFINITIONS
// =============================================================================

enum PartType {
  FINISHED      // Finished goods/assemblies - prefix FG-
  SEMI_FINISHED // Work-in-process/sub-assemblies - prefix SF-
  RAW_MATERIAL  // Raw materials/stock - prefix RM-
}

enum OrderPriority {
  RUSH
  STANDARD
  HOLD
}

enum BatchPriority {
  RUSH
  STANDARD
  HOLD
}

enum BatchStatus {
  QUEUED      // Waiting to start
  IN_PROGRESS // Currently being worked
  COMPLETED   // All steps finished
  ON_HOLD     // Temporarily paused
  CANCELLED   // Cancelled batch
}

enum StepStatus {
  PENDING     // Not started
  IN_PROGRESS // Currently being worked
  COMPLETED   // Step finished
  SKIPPED     // Step was skipped
  FAILED      // Step failed/flagged
}

enum ConfirmationStatus {
  STARTED     // Operator started step
  COMPLETED   // Operator completed step
  PAUSED      // Step paused
  FLAGGED     // Issue reported
}

enum SyncStatus {
  PENDING     // Not yet synced to QuickBooks
  SYNCED      // Successfully synced
  FAILED      // Sync failed
  UPDATING    // Sync in progress
}

enum QCResult {
  PASS
  FAIL
  REWORK_REQUIRED
}
