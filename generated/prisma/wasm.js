
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  billingAddress: 'billingAddress',
  shippingAddress: 'shippingAddress',
  notes: 'notes',
  quickbooksId: 'quickbooksId',
  syncStatus: 'syncStatus',
  lastSyncedAt: 'lastSyncedAt',
  syncError: 'syncError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  systemOrderId: 'systemOrderId',
  customerId: 'customerId',
  poNumber: 'poNumber',
  dueDate: 'dueDate',
  priority: 'priority',
  notes: 'notes',
  orderStatus: 'orderStatus',
  completedAt: 'completedAt',
  completedBy: 'completedBy',
  completionNotes: 'completionNotes',
  shippedAt: 'shippedAt',
  shippedBy: 'shippedBy',
  shippingNotes: 'shippingNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartScalarFieldEnum = {
  id: 'id',
  partNumber: 'partNumber',
  partName: 'partName',
  partType: 'partType',
  drawingNumber: 'drawingNumber',
  revisionLevel: 'revisionLevel',
  description: 'description',
  materialSpec: 'materialSpec',
  unitOfMeasure: 'unitOfMeasure',
  standardCost: 'standardCost',
  leadTime: 'leadTime',
  active: 'active',
  notes: 'notes',
  recommendedRoutingTemplateId: 'recommendedRoutingTemplateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BOMComponentScalarFieldEnum = {
  id: 'id',
  parentPartId: 'parentPartId',
  childPartId: 'childPartId',
  quantity: 'quantity',
  unitOfMeasure: 'unitOfMeasure',
  scrapFactor: 'scrapFactor',
  operation: 'operation',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderLineItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  partId: 'partId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  dueDate: 'dueDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileAttachmentScalarFieldEnum = {
  id: 'id',
  lineItemId: 'lineItemId',
  fileName: 'fileName',
  storedFileName: 'storedFileName',
  filePath: 'filePath',
  fileType: 'fileType',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  uploadedBy: 'uploadedBy',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.BatchScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  lineItemId: 'lineItemId',
  quantity: 'quantity',
  startDate: 'startDate',
  estimatedCompletion: 'estimatedCompletion',
  actualCompletion: 'actualCompletion',
  priority: 'priority',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaterialConsumptionScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  materialPartId: 'materialPartId',
  quantityUsed: 'quantityUsed',
  unitCost: 'unitCost',
  consumedAt: 'consumedAt',
  operatorId: 'operatorId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoutingStepScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  stepNumber: 'stepNumber',
  workstationId: 'workstationId',
  description: 'description',
  required: 'required',
  estimatedTime: 'estimatedTime',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoutingTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoutingTemplateStepScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  stepNumber: 'stepNumber',
  workstationId: 'workstationId',
  description: 'description',
  estimatedTime: 'estimatedTime',
  required: 'required',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkstationOperatorScalarFieldEnum = {
  id: 'id',
  operatorId: 'operatorId',
  operatorName: 'operatorName',
  email: 'email',
  phone: 'phone',
  certifications: 'certifications',
  shift: 'shift',
  hourlyRate: 'hourlyRate',
  active: 'active',
  currentWorkstationId: 'currentWorkstationId',
  loginTime: 'loginTime',
  logoutTime: 'logoutTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OperatorSessionScalarFieldEnum = {
  id: 'id',
  operatorId: 'operatorId',
  workstationId: 'workstationId',
  loginTime: 'loginTime',
  logoutTime: 'logoutTime',
  shift: 'shift',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkstationCapacityScalarFieldEnum = {
  id: 'id',
  workstationId: 'workstationId',
  maxConcurrentJobs: 'maxConcurrentJobs',
  avgSetupTime: 'avgSetupTime',
  efficiency: 'efficiency',
  hoursPerDay: 'hoursPerDay',
  maintenanceHours: 'maintenanceHours',
  operatingCostPerHour: 'operatingCostPerHour',
  maintenanceCostPerHour: 'maintenanceCostPerHour',
  utilizationTarget: 'utilizationTarget',
  qualityTarget: 'qualityTarget',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkstationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  active: 'active',
  category: 'category',
  location: 'location',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StepConfirmationScalarFieldEnum = {
  id: 'id',
  stepId: 'stepId',
  workstationId: 'workstationId',
  operatorName: 'operatorName',
  operatorId: 'operatorId',
  startTime: 'startTime',
  endTime: 'endTime',
  notes: 'notes',
  photoUrl: 'photoUrl',
  flagged: 'flagged',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QCRecordScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  inspector: 'inspector',
  inspectionDate: 'inspectionDate',
  result: 'result',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SyncStatus = exports.$Enums.SyncStatus = {
  PENDING: 'PENDING',
  SYNCED: 'SYNCED',
  FAILED: 'FAILED',
  UPDATING: 'UPDATING'
};

exports.OrderPriority = exports.$Enums.OrderPriority = {
  RUSH: 'RUSH',
  STANDARD: 'STANDARD',
  HOLD: 'HOLD'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  SHIPPED: 'SHIPPED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD'
};

exports.PartType = exports.$Enums.PartType = {
  FINISHED: 'FINISHED',
  SEMI_FINISHED: 'SEMI_FINISHED',
  RAW_MATERIAL: 'RAW_MATERIAL'
};

exports.BatchPriority = exports.$Enums.BatchPriority = {
  RUSH: 'RUSH',
  STANDARD: 'STANDARD',
  HOLD: 'HOLD'
};

exports.BatchStatus = exports.$Enums.BatchStatus = {
  QUEUED: 'QUEUED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD',
  CANCELLED: 'CANCELLED'
};

exports.StepStatus = exports.$Enums.StepStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED',
  FAILED: 'FAILED'
};

exports.OperatorShift = exports.$Enums.OperatorShift = {
  DAY: 'DAY',
  SWING: 'SWING',
  NIGHT: 'NIGHT',
  FLEXIBLE: 'FLEXIBLE'
};

exports.WorkstationCategory = exports.$Enums.WorkstationCategory = {
  MACHINING: 'MACHINING',
  ASSEMBLY: 'ASSEMBLY',
  WELDING: 'WELDING',
  INSPECTION: 'INSPECTION',
  PACKAGING: 'PACKAGING',
  PREP: 'PREP',
  FINISHING: 'FINISHING',
  OTHER: 'OTHER'
};

exports.ConfirmationStatus = exports.$Enums.ConfirmationStatus = {
  STARTED: 'STARTED',
  COMPLETED: 'COMPLETED',
  PAUSED: 'PAUSED',
  FLAGGED: 'FLAGGED'
};

exports.QCResult = exports.$Enums.QCResult = {
  PASS: 'PASS',
  FAIL: 'FAIL',
  REWORK_REQUIRED: 'REWORK_REQUIRED'
};

exports.Prisma.ModelName = {
  Customer: 'Customer',
  PurchaseOrder: 'PurchaseOrder',
  Part: 'Part',
  BOMComponent: 'BOMComponent',
  OrderLineItem: 'OrderLineItem',
  FileAttachment: 'FileAttachment',
  Batch: 'Batch',
  MaterialConsumption: 'MaterialConsumption',
  RoutingStep: 'RoutingStep',
  RoutingTemplate: 'RoutingTemplate',
  RoutingTemplateStep: 'RoutingTemplateStep',
  WorkstationOperator: 'WorkstationOperator',
  OperatorSession: 'OperatorSession',
  WorkstationCapacity: 'WorkstationCapacity',
  Workstation: 'Workstation',
  StepConfirmation: 'StepConfirmation',
  QCRecord: 'QCRecord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
