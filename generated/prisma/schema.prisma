// DES-BOMS (Delivered Engineering Solutions - Batch Order Management System)
// Manufacturing-focused database schema for order management, routing, and quality control

// Prisma Client Configuration
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// Database Configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// 1. CUSTOMER & ORDER MANAGEMENT
// =============================================================================

// Customer Model - Manufacturing customers who place orders
model Customer {
  id              String  @id @default(cuid())
  name            String // Customer/Company name
  contactName     String? // Primary contact person
  email           String? @unique
  phone           String?
  billingAddress  String?
  shippingAddress String?
  notes           String? // General customer notes

  // Relations
  purchaseOrders PurchaseOrder[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Purchase Order Header
model PurchaseOrder {
  id            String        @id @default(cuid())
  systemOrderId String        @unique @default(cuid()) // System-generated unique ID
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    String
  poNumber      String // Customer-provided PO number
  dueDate       DateTime // Order-level due date
  priority      OrderPriority @default(STANDARD)
  notes         String? // Order-level notes/shipping details

  // Relations
  lineItems OrderLineItem[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Order Line Items - Individual parts within a PO
model OrderLineItem {
  id            String        @id @default(cuid())
  purchaseOrder PurchaseOrder @relation(fields: [orderId], references: [id])
  orderId       String
  partNumber    String // Part identifier
  partName      String // Descriptive part name
  drawingNumber String? // Engineering drawing number
  revisionLevel String? // Drawing revision (A, B, C, etc.)
  quantity      Int // Ordered quantity
  dueDate       DateTime? // Line item due date (overrides PO due date)
  notes         String? // Line item specific notes

  // Relations
  fileAttachments FileAttachment[]
  batches         Batch[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// File Attachments - Drawings, CAD models, specs per line item
model FileAttachment {
  id          String        @id @default(cuid())
  lineItem    OrderLineItem @relation(fields: [lineItemId], references: [id])
  lineItemId  String
  fileName    String // Original file name
  fileType    String // File extension/type
  fileUrl     String // Storage path/URL
  uploadedBy  String // User who uploaded
  description String? // File description

  // Timestamps
  createdAt DateTime @default(now())
}

// =============================================================================
// 2. BATCH & ROUTING MANAGEMENT
// =============================================================================

// Batch - Manufacturing batch tied to a line item
model Batch {
  id                  String        @id @default(cuid())
  batchId             String        @unique // Format: DES-YYYY-MMDD-###
  lineItem            OrderLineItem @relation(fields: [lineItemId], references: [id])
  lineItemId          String
  quantity            Int // Quantity in this batch
  startDate           DateTime? // Actual start date
  estimatedCompletion DateTime? // Estimated completion
  actualCompletion    DateTime? // Actual completion
  priority            BatchPriority @default(STANDARD)
  status              BatchStatus   @default(QUEUED)
  notes               String? // Batch-specific notes

  // Relations
  routingSteps RoutingStep[]
  qcRecords    QCRecord[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Routing Steps - Sequential workstation steps for each batch
model RoutingStep {
  id            String      @id @default(cuid())
  batch         Batch       @relation(fields: [batchId], references: [id])
  batchId       String
  stepNumber    Int // Sequence in route (1, 2, 3...)
  workstation   Workstation @relation(fields: [workstationId], references: [id])
  workstationId String
  description   String // Task description
  required      Boolean     @default(true) // Is this step required?
  estimatedTime Int? // Estimated time in minutes
  notes         String? // Operator instructions
  status        StepStatus  @default(PENDING)

  // Relations
  confirmations StepConfirmation[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([batchId, stepNumber]) // Ensure unique step numbers per batch
}

// Workstations - Manufacturing workstations/machines
model Workstation {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "LATHE-1", "MILL-2"
  description String? // Workstation description
  active      Boolean @default(true)

  // Relations
  routingSteps  RoutingStep[]
  confirmations StepConfirmation[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =============================================================================
// 3. OPERATOR CONFIRMATION SYSTEM
// =============================================================================

// Step Confirmations - Operator actions at workstations
model StepConfirmation {
  id            String             @id @default(cuid())
  routingStep   RoutingStep        @relation(fields: [stepId], references: [id])
  stepId        String
  workstation   Workstation        @relation(fields: [workstationId], references: [id])
  workstationId String
  operatorName  String // Logged-in operator
  operatorId    String? // Optional operator ID/badge number
  startTime     DateTime? // When operator started step
  endTime       DateTime? // When operator completed step
  notes         String? // Operator comments/issues
  photoUrl      String? // Optional photo upload
  flagged       Boolean            @default(false) // Issue flagged?
  status        ConfirmationStatus @default(STARTED)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =============================================================================
// 4. INSPECTION & QUALITY CONTROL
// =============================================================================

// QC Records - Quality control inspections per batch
model QCRecord {
  id             String   @id @default(cuid())
  batch          Batch    @relation(fields: [batchId], references: [id])
  batchId        String
  inspector      String // Inspector name/ID
  inspectionDate DateTime @default(now())
  result         QCResult // Pass/Fail/Rework
  notes          String? // Inspection notes

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =============================================================================
// 5. ENUMS - STATUS DEFINITIONS
// =============================================================================

enum OrderPriority {
  RUSH
  STANDARD
  HOLD
}

enum BatchPriority {
  RUSH
  STANDARD
  HOLD
}

enum BatchStatus {
  QUEUED // Waiting to start
  IN_PROGRESS // Currently being worked
  COMPLETED // All steps finished
  ON_HOLD // Temporarily paused
  CANCELLED // Cancelled batch
}

enum StepStatus {
  PENDING // Not started
  IN_PROGRESS // Currently being worked
  COMPLETED // Step finished
  SKIPPED // Step was skipped
  FAILED // Step failed/flagged
}

enum ConfirmationStatus {
  STARTED // Operator started step
  COMPLETED // Operator completed step
  PAUSED // Step paused
  FLAGGED // Issue reported
}

enum QCResult {
  PASS
  FAIL
  REWORK_REQUIRED
}
